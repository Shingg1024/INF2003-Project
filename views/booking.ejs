<%- include('include/_header') %>
  <%- include('include/_nav') %>

    <!DOCTYPE html>
    <html lang="en">

    <head>
      <!-- Add your other head elements here -->
      <style>
        body {
          display: flex;
          flex-direction: column;
          min-height: 100vh;
          margin: 0;
        }

        body {
          background: linear-gradient(to bottom, #f0f0f0, #d8d8d8);
        }

        main {
          flex: 1;
        }

        footer {
          padding: 15px;
          color: #fff;
          text-align: center;
          background-color: rgb(16, 15, 15);
          /* Set the background color with transparency */
          backdrop-filter: blur(5px);
          /* Apply a blur effect to the background */
          margin-top: auto;
          /* Push the footer to the bottom */
        }

        .container h2 {
          font-family: Georgia, 'Times New Roman', Times, serif;
          font-size: 310%;
        }

        /* Style to display Review ID side by side */
        .table-bordered .thead-dark th {
          white-space: nowrap;
        }

        .table-bordered tbody tr td:first-child {
          white-space: nowrap;
        }
      </style>
    </head>

    <body>

      <!-- Your existing content -->
      <br><br>
      <div class="container mt-4">
        <h2 class="text-center mb-4">Bookings</h2>

        <div class="text-center mb-3">
          <input type="radio" name="sortByType" id="all" value="all" checked> All
          <input type="radio" name="sortByType" id="hostel" value="hostel"> Hostel
          <input type="radio" name="sortByType" id="restaurant" value="restaurant"> Restaurant
        </div>

        <div class="text-center mb-3">
          <input type="checkbox" name="sortUpcoming" id="upcoming" value="upcoming"> Upcoming
          <input type="checkbox" name="sortCompleted" id="completed" value="completed"> Completed
        </div>

        <div class="text-center mb-3">
          <button id="sort-button" class="btn btn-primary">Sort Data</button>
          <h1 id="display"></h1>
        </div>

        <input hidden id="hiddenUserId" value="<%= session.user.user_id %>" />

        <table class="table table-bordered">
          <thead>
            <tr>
              <th>id</th>
              <th>start</th>
              <th>end</th>
              <th>booking type</th>
            </tr>
          </thead>
          <tbody></tbody>
        </table>
      </div>

      <!-- End of your existing content -->

      <script>
        document.addEventListener('DOMContentLoaded', () => {
          // Trigger the sorting logic to show all data on page load
          sortData();
        });

        const sortButton = document.getElementById('sort-button');
        const userId = document.querySelector('#hiddenUserId').value;

        sortButton.addEventListener('click', () => {
          sortData();
        });

        function sortData() {
          const completed = document.getElementById('completed').checked;
          const upcoming = document.getElementById('upcoming').checked;
          const sortingParameter = document.querySelector('input[name="sortByType"]:checked').value;

          const tableBody = document.querySelector('tbody');
          tableBody.innerHTML = '';

          const fetchData = async (url) => {
            try {
              const response = await fetch(url);
              const data = await response.json();

              data.forEach(item => {
                const row = document.createElement('tr');
                 reviewCell = '';

                // Check the status of each booking individually
                if (completed && !upcoming)  {
                  // Add the review form if the booking is completed
                  reviewCell = `<td>
            <form action="review/submitHostelReview" method="post">
              <input type="hidden" id="user_id" name="user_id" value=${userId}>
              <input type="hidden" id="booking_hostel_id" name="booking_hostel_id" value=${item.booking_hostel_id}>
              <textarea id="review_comments" name="review_comments" rows="4" cols="50" placeholder="Enter your comments here"></textarea><br>
              <input type="number" id="reviewpoints" name="reviewpoints" min="1" max="5" placeholder='Rating'>
              <input type="submit" value="Submit">
            </form>
          </td>`;
                } else if (upcoming && !completed) {
                  // Display "Not completed" for upcoming bookings
                  reviewCell = `<td><p>Not completed</p></td>`;
                }

                // Update the row's innerHTML based on sortingParameter including reviewCell
                if (sortingParameter === 'hostel') {
                  row.innerHTML = `<td>${item.hostel_id}</td></td><td>${item.date_start}</td><td>${item.date_end}</td>${reviewCell}`;
                } else if (sortingParameter === 'restaurant') {
                  row.innerHTML = `<td>${item.restaurant_id}</td><td>${item.date}</td><td>${item.time}</td>${reviewCell}`;
                } else if (sortingParameter === 'all') {
                  row.innerHTML = `<td>${item.booking_hostel_id}</td><td>${item.date_start}</td><td>${item.date_end}</td><td>${item.booking_type}</td>`;
                }

                // Append the row to the table body
                tableBody.appendChild(row);
              });
            } catch (error) {
              console.error("An error occurred:", error);
            }
          };

          if ((!completed && !upcoming)|| (completed && upcoming)){
            if (sortingParameter === 'hostel') {
              fetchData(`/booking/getAllHostelByUserId/${userId}`);
            } else if (sortingParameter === 'restaurant') {
              fetchData(`/booking/getRestaurantByUserId/${userId}`);
            } else if (sortingParameter === 'all') {
              fetchData(`/booking/getBooking/${userId}`);
            }
          } else if (completed && !upcoming) {
            if (sortingParameter === 'hostel')
              fetchData(`/booking/getHostelCompleted/${userId}`);
            else if (sortingParameter === 'restaurant')
              fetchData(`/booking/getRestaurantCompleted/${userId}`);
            else if (sortingParameter === 'all')
              fetchData(`/booking/getHostelAndRestaurantCompleted/${userId}`);
          } else if (upcoming && !completed) {
            if (sortingParameter === 'hostel')
              fetchData(`/booking/getHostelUpcoming/${userId}`);
            else if (sortingParameter === 'restaurant')
              fetchData(`/booking/getRestaurantUpcoming/${userId}`);
            else if (sortingParameter === 'all')
              fetchData(`/booking/getHostelAndRestaurantUpcoming/${userId}`);
          }
          // if (completed && upcoming) {
          //   let fetchDataUpcoming, fetchDataCompleted;

          //   if (sortingParameter === 'hostel') {
          //     fetchDataUpcoming = fetchData(`/booking/getHostelUpcoming/${userId}`);
          //     fetchDataCompleted = fetchData(`/booking/getHostelCompleted/${userId}`);
          // } else if (sortingParameter === 'restaurant') {
          //     fetchDataUpcoming = fetchData(`/booking/getRestaurantUpcoming/${userId}`);
          //     fetchDataCompleted = fetchData(`/booking/getRestaurantCompleted/${userId}`);
          //   } else if (sortingParameter === 'all') {
          //     fetchDataUpcoming = fetchData(`/booking/getBooking/${userId}`);
          //   }

          //   // Use Promise.all() to wait for both promises to resolve
          //   Promise.all([fetchDataUpcoming, fetchDataCompleted])
          //     .then(([dataUpcoming, dataCompleted]) => {
          //       // Combine or process the results as needed
          //       const combinedData = dataUpcoming.concat(dataCompleted);

          //       // Now you can use the combinedData array in your logic
          //       combinedData.forEach(item => {
          //         // Your existing logic here
          //       });

          //       // Update table headers based on the column names
          //       updateTableHeaders(sortingParameter === 'hostel' ? ['Hostel', 'Date Start', 'Date End', 'Review'] :
          //         sortingParameter === 'restaurant' ? ['Restaurant', 'Date', 'Time', 'Review'] : ['ID', 'Start', 'End', 'Booking Type']);
          //     })
          //     .catch(error => {
          //       console.error("An error occurred:", error);
          //     });
          // } 
          // else {
            // For other cases, use the existing logic
            updateTableHeaders(sortingParameter === 'hostel' ? ['Hostel', 'Date Start', 'Date End', 'Review'] :
              sortingParameter === 'restaurant' ? ['Restaurant', 'Date', 'Time', 'Review'] : ['ID', 'Start', 'End', 'Booking Type']);
          }
       // }

        function updateTableHeaders(columnNames) {
          const thead = document.querySelector('thead tr');
          thead.innerHTML = '';
          columnNames.forEach(columnName => {
            const th = document.createElement('th');
            th.textContent = columnName;
            thead.appendChild(th);
          });
        }

      </script>

      <%- include('include/_footer')%>

    </body>

    </html>